const CustomError = require('./../Utils/CustomError')

//GLOBAL ERROR HANDLER

const devErrors = (res, error) => {
    return res.status(error.statusCode).json({
        status : error.statusCode,
        message : error.message,
        stackTrace : error.stack,
        error: error
    })
}


const proErrors = (res, error) => {
    if(error.isOperational){
        return res.status(error.statusCode).json({
            status : error.statusCode,
            message : error.message
        })
    }
    else{
        // errors generated by mongoose, that are not marked by isOperational = true, are treaded as non-operational errors
        return res.status(500).json({
            status : 'error',
            message : 'Something went wrong! Please try again later.'
        })
    }
}

const castErrorHandler = (err) => {
    const message = `Invalid value for ${err.path}: ${err.value}`
    return new CustomError(message, 400)
}

const DuplicateKeyErrorHandler = (err) => {
    const message = `A record already exist with (${err.keyValue.name}). Please try another!`
    return new CustomError(message, 400)

}

const ValidationErrorHandler = (err) => {
    const errors = Object.values(err.errors).map(val => val.message)
    const errorMessages = errors.join('. ')
    const message = `Invalid input data: (${errorMessages})`
    return new CustomError(message, 400)
}

TokenExpiredErrorHandler = (err) => {
    const message = `Expired authorization token (jwt), please login again`
    return new CustomError(message, 401)
}

JsonTokenErrorHandler = (err) => {
    const message = `Invalid authorization token (jwt), please login again`
    return new CustomError(message, 401)
}

///

module.exports = (error, req, res, next) => { // error handling middleware
    error.statusCode = error.statusCode || 500
    error.status = error.status || 'error'

    if(process.env.NODE_ENV === 'development'){
        devErrors(res, error)
    }
    else if(process.env.NODE_ENV === 'production'){
        // let err = {...error} // if this destructuring does not work then use the original error insted of err and remove this line
        if(error.name === "CastError"){
            error= castErrorHandler(error)
        }
        else if(error.name === "ValidationError"){
            error = ValidationErrorHandler(error)
        }
        else if(error.code === 11000){
            //duplicate key error
            error = DuplicateKeyErrorHandler(error)
        }
        else if(error.name === "TokenExpiredError"){
            //TokenExpiredError error
            error = TokenExpiredErrorHandler(error)
        }
        else if(error.name === "JsonTokenError"){
            //TokenExpiredError error
            error = JsonTokenErrorHandler(error)
        }
        proErrors(res, error)
    }
}